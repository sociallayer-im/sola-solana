import {useRouter} from 'next/navigation'
import Link from 'next/link'
import {useContext, useEffect, useState} from 'react'
import UserContext from "@/components/provider/UserProvider/UserContext";
import usePicture from "@/hooks/pictrue";
import Panel from "@/pages/event/merge/Panel";
import DialogsContext from "@/components/provider/DialogProvider/DialogsContext";
import AppSwiper from "@/components/eventSpecial/AppSwiper/AppSwiper";
import BeastBtn from "@/components/compose/DivineBeast/BeastBtn";
import {Badge, Badgelet, combine, Event, ProfileSimple, queryEvent} from "@/service/solas";
import useformatTime from "@/hooks/formatTime";
import useBeastConfig from "@/components/compose/DivineBeast/beastConfig";
import {ChevronDown} from "baseui/icon";
import {request} from 'graphql-request'

const combineAmount = 2

function MergeItem({badgelets, handleCombine, temple}: { badgelets: Badgelet[], handleCombine: any, temple: Badge }) {
    const [showRes, setShowRes] = useState(false)

    return <div className={'combine-item'}>
        {showRes ?
            <div className={'merge-res'}>
                <div className={'card'}>
                    <img src={temple.image_url} alt=""/>
                </div>
                <div className={'name'}>{temple.title}</div>
            </div>
            : <>
                <div className={'formula'}>
                    <div className={'row'}>
                        <div className={'card'}> {!!badgelets[0] &&
                            <img src={badgelets[0].badge.image_url} alt=""/>}</div>
                        <div className={'card'}> {!!badgelets[1] &&
                            <img src={badgelets[1].badge.image_url} alt=""/>}</div>
                    </div>
                    <div className={'row'}>
                        <div className={'card'}>{!!badgelets[2] &&
                            <img src={badgelets[2].badge.image_url} alt=""/>}</div>
                    </div>
                    <div className={'row'}>
                        <div className={'card'}>{!!badgelets[3] &&
                            <img src={badgelets[3].badge.image_url} alt=""/>}</div>
                        <div className={'card'}>{!!badgelets[4] &&
                            <img src={badgelets[4].badge.image_url} alt=""/>}</div>
                    </div>
                </div>
                <div className={'des'}>{`${combineAmount} Normal`}</div>
                <div className={'des-b'}>Combine into 1 Epic</div>
                <BeastBtn background={'#4B2484'} onClick={async (e) => {
                    await handleCombine(JSON.parse(temple.metadata!)['color'], temple.id)
                    setShowRes(true)
                    setTimeout(() => {
                        setShowRes(false)
                    }, 5000)
                }}>Combine</BeastBtn>
            </>
        }
    </div>
}

function Merge() {
    const router = useRouter()
    const {user} = useContext(UserContext)
    const {defaultAvatar} = usePicture()
    const {openConnectWalletDialog, showLoading, showToast, showBadgelet} = useContext(DialogsContext)
    const formatTime = useformatTime()
    const [events, setEvents] = useState<Event[]>([])
    const [myCards, setMyCards] = useState<Badgelet[]>([])
    const [myMergedCards, setMyMergedCards] = useState<Badgelet[]>([])
    const [temples, setTemples] = useState<Badge[]>([])
    const [loading, setLoading] = useState(true)
    const [resource, setResource] = useState<any>(null)
    const [success, setSuccess] = useState(false)
    const {beastInfo} = useBeastConfig()
    const [swiperInitIndex, setSwiperInitIndex] = useState(0)
    const [tab, setTab] = useState(0)
    const [rank, setRank] = useState<{ user: ProfileSimple, count: number }[]>([])

    useEffect(() => {
        async function getEvents() {
            try {
                const events = await queryEvent({page: 1, group_id: 1925})
                setEvents(events.splice(0, 3))
            } catch (e: any) {
                console.error(e)
            }
        }

        getEvents()
        getRank()
    }, [])

    async function getMyCards() {
        if (user.id) {
            const myBadgelet = `
            query MyQuery {
                badgelets(where: {owner_id: {_eq: ${user.id}}, status: {_neq: "burned"}, badge: {permissions: {_contains:["wamo-normal"]}}}) {
                      created_at
                      id
                      image_url
                      display
                      title
                      status
                      metadata
                      badge_id
                      badge {
                        metadata
                        badge_type
                        content
                        counter
                        created_at
                        group_id
                        name
                        title
                        image_url
                        id
                      }
                      badge_id
                      content
                      creator {
                        id
                        nickname
                        image_url
                        username
                      }
                      owner_id
                      owner {
                        id
                        nickname
                        image_url
                        username
                      }
  }
}
`

            const res: any = await request(process.env.NEXT_PUBLIC_GRAPH!, myBadgelet)
            setMyCards(res.badgelets)
            setLoading(false)
        } else {
            setMyCards([])
            setLoading(false)
        }
    }

    async function getMyMergedCards() {
        if (user.id) {
            const myBadgelet = `
            query MyQuery {
                badgelets(where: {owner_id: {_eq: ${user.id}}, status: {_neq: "burned"}, badge: {permissions: {_contains:["wamo-merge"]}}}) {
                      created_at
                      id
                      image_url
                      display
                      title
                      status
                      metadata
                      badge_id
                      badge {
                        metadata
                        badge_type
                        content
                        counter
                        created_at
                        group_id
                        name
                        title
                        image_url
                        id
                      }
                      badge_id
                      content
                      creator {
                        id
                        nickname
                        image_url
                        username
                      }
                      owner_id
                      owner {
                        id
                        nickname
                        image_url
                        username
                      }
  }
}
`

            const res: any = await request(process.env.NEXT_PUBLIC_GRAPH!, myBadgelet)
            setMyMergedCards(res.badgelets)
            setLoading(false)
        } else {
            setMyCards([])
            setLoading(false)
        }
    }

    async function getTemples() {
        const myBadge = `
            query MyQuery {
                badges(where: {permissions: {_contains:["wamo-merge"]}}, order_by: {id: desc}) {
                        badge_type
                        metadata
                        content
                        counter
                        created_at
                        group_id
                        name
                        title
                        image_url
                        id
                        }
                    }`

        const res: any = await request(process.env.NEXT_PUBLIC_GRAPH!, myBadge)
        setTemples(res.badges)
        setLoading(false)
    }

    async function getRank() {
        const myBadgelet = `
            query MyQuery @cached {
                  badgelets(where: {status: {_neq: "burned"}, badge: {_or: [{permissions: {_contains: ["wamo-normal"]}}, {permissions: {_contains: ["wamo-merge"]}}]}}) {
                    badge {
                      permissions
                    }
                    owner {
                      id
                      nickname
                      username
                    }
                  }
                }`

        const res: any = await request(process.env.NEXT_PUBLIC_GRAPH!, myBadgelet)
        const rank: { user: ProfileSimple, count: number }[] = []

        res.badgelets.forEach((badgelet: any) => {
            const user = rank.find(item => item.user.id === badgelet.owner.id)
            const delta = badgelet.badge.permissions.includes('wamo-merge') ? combineAmount : 1
            if (user) {
                user.count += delta
            } else {
                rank.push({user: badgelet.owner, count: delta})
            }
        })

        rank.sort((a, b) => b.count - a.count)
        setRank(rank)
    }

    useEffect(() => {
        getMyCards()
        getTemples()
        getMyMergedCards()
    }, [user.id])

    async function handleCombine(color: string, targetBadgeId: number) {
        const badglets = myCards.filter(badgelet => badgelet.badge.metadata?.includes(color))
        if (badglets.length < combineAmount) {
            showToast('You need at least 2 cards to combine')
            return
        }

        const unload = showLoading()
        try {
            await combine({
                badgelet_ids: badglets.map(badgelet => badgelet.id).slice(0, combineAmount),
                auth_token: user.authToken || '',
                new_badge_id: targetBadgeId,
                color
            })
            showToast('Combine success')
            getMyCards()
            getTemples()
            getRank()
            unload()
            setSuccess(true)
            setTimeout(() => {
                setSuccess(false)
            }, 2000)
        } catch (e: any) {
            showToast(e.message)
            unload()
        }
    }

    const items = temples.map((temple, index) => {
        const metadata = temple.metadata ? JSON.parse(temple.metadata) : {}
        const badgelet = myCards.filter(badgelet => badgelet.badge.metadata?.includes(metadata.color))
        return <MergeItem key={index} temple={temple} badgelets={badgelet} handleCombine={handleCombine}/>
    })

    return (<div>
        <div className={'wamo-merge-page'}>
            {success && <img className={'success-animation'} src="/images/merge/success_animation.gif" alt=""/>}
            <div className={'center'}>
                <i className={'bg_1'}/>
                <img className={'bg_2'} src="/images/merge/bg.png" alt=""/>
                <i className={'bg_3'}/>
                <div className={'page-header'}>
                    <div className={'left'}>
                        <a href={'/'}><img src={'/images/logo.svg'} alt={''}/></a>
                        <i className={'split'}/>
                        <Link href={'/event'} className={'home'}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="44" height="18" viewBox="0 0 44 18"
                                 fill="none">
                                <path
                                    d="M8.68771 13.2422H1.44555C1.26513 13.2422 1.11963 13.3877 1.11963 13.5681V16.7537C1.11963 16.9341 1.26513 17.0796 1.44555 17.0796H8.68771C8.86813 17.0796 9.01364 16.9341 9.01364 16.7537V13.5681C9.01364 13.3877 8.86813 13.2422 8.68771 13.2422ZM6.54203 14.4702C6.54203 14.5071 6.51293 14.5362 6.47607 14.5362H5.48665C5.44979 14.5362 5.42069 14.5653 5.42069 14.6022V16.3094C5.42069 16.3462 5.39159 16.3754 5.35473 16.3754H4.7766C4.73974 16.3754 4.71063 16.3462 4.71063 16.3094V14.6022C4.71063 14.5653 4.68153 14.5362 4.64467 14.5362H3.65526C3.6184 14.5362 3.58929 14.5071 3.58929 14.4702V14.0124C3.58929 13.9755 3.6184 13.9464 3.65526 13.9464H6.47607C6.51293 13.9464 6.54203 13.9755 6.54203 14.0124V14.4702Z"
                                    fill="#231815"/>
                                <path
                                    d="M17.1516 13.2422H9.90942C9.729 13.2422 9.5835 13.3877 9.5835 13.5681V16.7537C9.5835 16.9341 9.729 17.0796 9.90942 17.0796H17.1516C17.332 17.0796 17.4775 16.9341 17.4775 16.7537V13.5681C17.4775 13.3877 17.332 13.2422 17.1516 13.2422ZM15.0719 15.7371C15.0719 15.7953 15.0466 15.8515 15.0001 15.8884L14.4666 16.3288C14.4316 16.3579 14.387 16.3734 14.3405 16.3734H12.7167C12.6701 16.3734 12.6255 16.3579 12.5906 16.3288L12.059 15.8884C12.0144 15.8515 11.9872 15.7953 11.9872 15.7371V14.5828C11.9872 14.5246 12.0124 14.4683 12.059 14.4314L12.5925 13.991C12.6274 13.9619 12.672 13.9464 12.7186 13.9464H14.3424C14.389 13.9464 14.4336 13.9619 14.4685 13.991L15.0001 14.4314C15.0447 14.4683 15.0719 14.5246 15.0719 14.5828V15.7371Z"
                                    fill="#231815"/>
                                <path
                                    d="M14.1198 14.5575C14.1023 14.5439 14.081 14.5361 14.0577 14.5361H13.0024C12.9791 14.5361 12.9577 14.5439 12.9403 14.5594L12.7346 14.7301C12.7133 14.7495 12.6997 14.7767 12.6997 14.8038V15.5178C12.6997 15.5469 12.7133 15.574 12.7346 15.5934L12.9441 15.7642C12.9616 15.7777 12.9829 15.7855 13.0062 15.7855H14.0597C14.0829 15.7855 14.1043 15.7777 14.1218 15.7642L14.3313 15.5934C14.3546 15.574 14.3662 15.5469 14.3662 15.5178V14.8038C14.3662 14.7747 14.3526 14.7476 14.3313 14.7282L14.1218 14.5575H14.1198Z"
                                    fill="#231815"/>
                                <path
                                    d="M22.5028 14.5438C22.4853 14.5302 22.464 14.5205 22.4407 14.5205H21.3853C21.3484 14.5205 21.3193 14.5496 21.3193 14.5865V15.1025C21.3193 15.1394 21.3484 15.1685 21.3853 15.1685H22.4407C22.464 15.1685 22.4853 15.1607 22.5028 15.1452L22.6502 15.0249C22.6657 15.0133 22.6735 14.9939 22.6735 14.9745V14.7126C22.6735 14.6932 22.6657 14.6738 22.6502 14.6621L22.5028 14.5418V14.5438Z"
                                    fill="#231815"/>
                                <path
                                    d="M25.6184 13.2422H18.3762C18.1958 13.2422 18.0503 13.3877 18.0503 13.5681V16.7537C18.0503 16.9341 18.1958 17.0796 18.3762 17.0796H25.6184C25.7988 17.0796 25.9443 16.9341 25.9443 16.7537V13.5681C25.9443 13.3877 25.7988 13.2422 25.6184 13.2422ZM23.3835 15.1822C23.3835 15.2404 23.3582 15.2948 23.3136 15.3316L22.8693 15.7002C22.8344 15.7293 22.7898 15.7448 22.7452 15.7448H21.3212V16.3055C21.3212 16.3424 21.2921 16.3715 21.2552 16.3715H20.679C20.6422 16.3715 20.6131 16.3424 20.6131 16.3055V14.0085C20.6131 13.9736 20.6422 13.9445 20.6771 13.9445H22.7413C22.7859 13.9445 22.8305 13.96 22.8655 13.9891L23.3136 14.3616C23.3582 14.3985 23.3835 14.4528 23.3835 14.511V15.1803V15.1822Z"
                                    fill="#231815"/>
                                <path
                                    d="M34.0827 13.2422H26.8406C26.6602 13.2422 26.5146 13.3877 26.5146 13.5681V16.7537C26.5146 16.9341 26.6602 17.0796 26.8406 17.0796H34.0827C34.2632 17.0796 34.4087 16.9341 34.4087 16.7537V13.5681C34.4087 13.3877 34.2632 13.2422 34.0827 13.2422ZM31.4385 14.4528C31.4385 14.4877 31.4094 14.5168 31.3745 14.5168H30.8797C30.8429 14.5168 30.8157 14.5459 30.8157 14.5808V15.7545C30.8157 15.7895 30.8448 15.8186 30.8797 15.8186H31.3745C31.4094 15.8186 31.4385 15.8477 31.4385 15.8826V16.3152C31.4385 16.3501 31.4094 16.3792 31.3745 16.3792H29.5489C29.5139 16.3792 29.4849 16.3501 29.4849 16.3152V15.8826C29.4849 15.8477 29.5139 15.8186 29.5489 15.8186H30.0416C30.0785 15.8186 30.1057 15.7895 30.1057 15.7545V14.5808C30.1057 14.5459 30.0766 14.5168 30.0416 14.5168H29.5489C29.5139 14.5168 29.4849 14.4877 29.4849 14.4528V14.0201C29.4849 13.9852 29.5139 13.9561 29.5489 13.9561H31.3745C31.4094 13.9561 31.4385 13.9852 31.4385 14.0201V14.4528Z"
                                    fill="#231815"/>
                                <path
                                    d="M38.9656 14.5328L38.9171 14.4785L38.8686 14.5328L38.4845 15.2604C38.4612 15.303 38.4922 15.3554 38.5407 15.3554H39.2935C39.342 15.3554 39.373 15.303 39.3497 15.2604L38.9636 14.5328H38.9656Z"
                                    fill="#231815"/>
                                <path
                                    d="M42.5471 13.2422H35.3049C35.1245 13.2422 34.979 13.3877 34.979 13.5681V16.7537C34.979 16.9341 35.1245 17.0796 35.3049 17.0796H42.5471C42.7275 17.0796 42.873 16.9341 42.873 16.7537V13.5681C42.873 13.3877 42.7275 13.2422 42.5471 13.2422ZM40.6303 16.3074C40.6303 16.3443 40.6012 16.3734 40.5624 16.3734H40.0018C39.9649 16.3734 39.9319 16.354 39.9145 16.321L39.7399 15.9912C39.7224 15.9602 39.6894 15.9388 39.6526 15.9388H38.182C38.1451 15.9388 38.1122 15.9582 38.0947 15.9912L37.922 16.321C37.9046 16.354 37.8716 16.3734 37.8347 16.3734H37.2857C37.2488 16.3734 37.2198 16.3443 37.2198 16.3074V16.2007C37.2198 16.1794 37.2256 16.1581 37.2353 16.1387L38.4303 13.9949C38.4478 13.9639 38.4808 13.9445 38.5176 13.9445H39.3286C39.3654 13.9445 39.3984 13.9639 39.4159 13.9949L40.6109 16.1387C40.6226 16.1581 40.6284 16.1794 40.6284 16.2027V16.3074H40.6303Z"
                                    fill="#231815"/>
                                <path
                                    d="M10.5674 10.1037C10.4723 9.71371 10.5383 9.31019 10.7536 8.97068L13.59 4.47367V1.15621C13.59 0.514057 13.0681 -0.0078125 12.424 -0.0078125H12.4182C11.8226 -0.0078125 11.324 0.440331 11.26 1.0301L11.1921 1.47632L10.74 4.47367C10.6566 5.02076 10.1871 5.42623 9.63229 5.42623H9.62647C9.07162 5.42623 8.60018 5.02077 8.5187 4.47174L8.00847 1.03399C7.94639 0.442275 7.44586 -0.00587057 6.85027 -0.00587057H6.73775C6.14216 -0.00587057 5.64163 0.442275 5.57955 1.03399L5.06932 4.47174C4.98784 5.02077 4.51641 5.42623 3.96156 5.42623H3.95574C3.40283 5.42623 2.9314 5.0227 2.84798 4.47561L2.32417 1.0301C2.25627 0.407351 1.70336 -0.0563137 1.06508 -0.00199263C0.453973 0.0503884 0 0.589715 0 1.20083V4.6735C0 5.0615 0.0950623 5.44175 0.279366 5.78319L2.62681 10.1502C2.87126 10.5887 3.33493 10.8603 3.83546 10.8603C4.54551 10.8603 5.13916 10.3248 5.21288 9.61865L5.68237 6.42729C5.75803 5.91706 6.15186 5.49219 6.66403 5.43399C7.27708 5.36221 7.81835 5.79096 7.90565 6.38267L8.38096 9.61865C8.45274 10.3229 9.04834 10.8603 9.75839 10.8603C10.1212 10.8603 10.4626 10.7167 10.7168 10.4723C10.6527 10.3578 10.6042 10.2356 10.5732 10.1056L10.5674 10.1037Z"
                                    fill="#231815"/>
                                <path
                                    d="M20.1839 9.69626V8.34793C19.955 8.1578 19.8056 7.88038 19.7862 7.57385L19.3691 1.40454C19.3147 0.609125 18.6551 -0.0078125 17.8578 -0.0078125C17.3379 -0.0078125 16.8528 0.259915 16.5754 0.698364L11.2364 9.16662C10.9047 9.69237 11.0715 10.3889 11.6109 10.7051C11.7796 10.804 11.9639 10.8506 12.1483 10.8506C12.5324 10.8506 12.9126 10.6488 13.1299 10.3035L13.904 9.07544C14.0941 8.77474 14.422 8.60401 14.7615 8.60401C14.8915 8.60401 15.0253 8.62923 15.1514 8.68355L20.1431 10.773C20.2828 10.8312 20.4283 10.8583 20.5699 10.8583C20.6165 10.8583 20.1858 10.1541 20.1858 9.69431L20.1839 9.69626Z"
                                    fill="#231815"/>
                                <path
                                    d="M41.0783 0.259925C40.9076 0.0892015 40.6748 -0.00585938 40.4342 -0.00585938H37.5785C37.336 -0.00585938 37.1051 0.0892015 36.9344 0.259925L34.2804 2.91001C34.1097 3.08073 34.0127 3.3116 34.0127 3.5541V7.30031C34.0127 7.54088 34.1097 7.77368 34.2804 7.94441L36.9344 10.5945C37.1051 10.7652 37.3379 10.8603 37.5785 10.8603H40.4342C40.6767 10.8603 40.9076 10.7652 41.0783 10.5945L43.7323 7.94441C43.903 7.77368 44 7.54282 44 7.30031V3.5541C44 3.31354 43.903 3.08073 43.7323 2.91001L41.0783 0.259925ZM40.9367 7.2654C40.9367 7.56222 40.6961 7.80279 40.3974 7.80279H37.6115C37.3146 7.80279 37.0721 7.56222 37.0721 7.2654V3.58902C37.0721 3.2922 37.3127 3.05164 37.6115 3.05164H40.3974C40.6942 3.05164 40.9367 3.2922 40.9367 3.58902V7.2654Z"
                                    fill="#231815"/>
                                <path
                                    d="M33.8475 8.20632C33.605 7.96382 33.4712 7.64176 33.4712 7.30031V3.5541C33.4712 3.21266 33.605 2.89061 33.8475 2.64811L34.3209 2.17668V1.43753C34.3209 0.640173 33.6729 -0.00585938 32.8756 -0.00585938H30.5339C29.8336 -0.00585938 29.238 0.504371 29.1332 1.19502L28.6327 4.46981C28.5512 5.01884 28.0798 5.42624 27.523 5.42624C26.9662 5.42624 26.4948 5.01884 26.4152 4.46981L25.9147 1.19502C25.808 0.504371 25.2143 -0.00585938 24.514 -0.00585938H22.1724C21.375 -0.00585938 20.7271 0.640173 20.7271 1.43753V9.69821C20.7271 10.3404 21.2489 10.8622 21.893 10.8622H21.8988C22.4944 10.8622 22.993 10.4141 23.057 9.8243L23.1249 9.3781L23.577 6.38074C23.6604 5.83365 24.1299 5.42819 24.6847 5.42819H24.6905C25.2454 5.42819 25.7168 5.83365 25.7983 6.38268L26.3085 9.82042C26.3706 10.4121 26.8711 10.8603 27.4667 10.8603H27.5793C28.1749 10.8603 28.6754 10.4121 28.7375 9.82042L29.2477 6.38268C29.3292 5.83365 29.8006 5.42819 30.3555 5.42819H30.3613C30.9161 5.42819 31.3876 5.83365 31.469 6.38074L31.9211 9.3781L31.989 9.8243C32.053 10.4141 32.5516 10.8622 33.1472 10.8622H33.153C33.7971 10.8622 34.3189 10.3423 34.3189 9.69821V8.67969L33.8456 8.20825L33.8475 8.20632Z"
                                    fill="#231815"/>
                            </svg>
                        </Link>
                    </div>
                </div>
                <div className={'main-contain'}>
                    <div className={'page-title'}/>
                    <div className={'tab-titles'}>
                        <svg onClick={e => {
                            setTab(0)
                        }} className={tab === 0 ? 'active' : ''} width="101" height="39" viewBox="0 0 101 39"
                             fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path className={'p1'}
                                  d="M0.5 8.45682L8.44109 0.5H92.0194L100.5 8.46632V19.5V30.5337L92.0194 38.5H8.44109L0.5 30.5432V19.5V8.45682Z"
                                  fill="#FBFBF4" stroke="#C1B9C0"/>
                            <path className={'p2'} opacity="0.3"
                                  d="M4.25 10.6602L10.573 4.25H88.6429L95.75 10.6688V19.5V28.3312L88.6429 34.75H10.573L4.25 28.3398V19.5V10.6602Z"
                                  fill="#FFFFE7" stroke="#BFB9C1" strokeWidth="0.5"/>
                            <path className={'p3'}
                                  d="M35.2899 15.576V24H33.2379V18.948L31.3539 24H29.6979L27.8019 18.936V24H25.7499V15.576H28.1739L30.5379 21.408L32.8779 15.576H35.2899ZM43.9656 17.304L39.7656 27.18H37.5576L39.0936 23.772L36.3696 17.304H38.6616L40.2096 21.492L41.7456 17.304H43.9656ZM47.5626 20.652C47.5626 19.956 47.7026 19.348 47.9826 18.828C48.2706 18.308 48.6666 17.908 49.1706 17.628C49.6826 17.348 50.2666 17.208 50.9226 17.208C51.7626 17.208 52.4626 17.428 53.0226 17.868C53.5906 18.308 53.9626 18.928 54.1386 19.728H51.9546C51.7706 19.216 51.4146 18.96 50.8866 18.96C50.5106 18.96 50.2106 19.108 49.9866 19.404C49.7626 19.692 49.6506 20.108 49.6506 20.652C49.6506 21.196 49.7626 21.616 49.9866 21.912C50.2106 22.2 50.5106 22.344 50.8866 22.344C51.4146 22.344 51.7706 22.088 51.9546 21.576H54.1386C53.9626 22.36 53.5906 22.976 53.0226 23.424C52.4546 23.872 51.7546 24.096 50.9226 24.096C50.2666 24.096 49.6826 23.956 49.1706 23.676C48.6666 23.396 48.2706 22.996 47.9826 22.476C47.7026 21.956 47.5626 21.348 47.5626 20.652ZM55.1882 20.64C55.1882 19.952 55.3162 19.348 55.5722 18.828C55.8362 18.308 56.1922 17.908 56.6402 17.628C57.0882 17.348 57.5882 17.208 58.1402 17.208C58.6122 17.208 59.0242 17.304 59.3762 17.496C59.7362 17.688 60.0122 17.94 60.2042 18.252V17.304H62.2562V24H60.2042V23.052C60.0042 23.364 59.7242 23.616 59.3642 23.808C59.0122 24 58.6002 24.096 58.1282 24.096C57.5842 24.096 57.0882 23.956 56.6402 23.676C56.1922 23.388 55.8362 22.984 55.5722 22.464C55.3162 21.936 55.1882 21.328 55.1882 20.64ZM60.2042 20.652C60.2042 20.14 60.0602 19.736 59.7722 19.44C59.4922 19.144 59.1482 18.996 58.7402 18.996C58.3322 18.996 57.9842 19.144 57.6962 19.44C57.4162 19.728 57.2762 20.128 57.2762 20.64C57.2762 21.152 57.4162 21.56 57.6962 21.864C57.9842 22.16 58.3322 22.308 58.7402 22.308C59.1482 22.308 59.4922 22.16 59.7722 21.864C60.0602 21.568 60.2042 21.164 60.2042 20.652ZM66.1527 18.42C66.3927 18.052 66.6927 17.764 67.0527 17.556C67.4127 17.34 67.8127 17.232 68.2527 17.232V19.404H67.6887C67.1767 19.404 66.7927 19.516 66.5367 19.74C66.2807 19.956 66.1527 20.34 66.1527 20.892V24H64.1007V17.304H66.1527V18.42ZM69.1855 20.64C69.1855 19.952 69.3135 19.348 69.5695 18.828C69.8335 18.308 70.1895 17.908 70.6375 17.628C71.0855 17.348 71.5855 17.208 72.1375 17.208C72.5775 17.208 72.9775 17.3 73.3375 17.484C73.7055 17.668 73.9935 17.916 74.2015 18.228V15.12H76.2535V24H74.2015V23.04C74.0095 23.36 73.7335 23.616 73.3735 23.808C73.0215 24 72.6095 24.096 72.1375 24.096C71.5855 24.096 71.0855 23.956 70.6375 23.676C70.1895 23.388 69.8335 22.984 69.5695 22.464C69.3135 21.936 69.1855 21.328 69.1855 20.64ZM74.2015 20.652C74.2015 20.14 74.0575 19.736 73.7695 19.44C73.4895 19.144 73.1455 18.996 72.7375 18.996C72.3295 18.996 71.9815 19.144 71.6935 19.44C71.4135 19.728 71.2735 20.128 71.2735 20.64C71.2735 21.152 71.4135 21.56 71.6935 21.864C71.9815 22.16 72.3295 22.308 72.7375 22.308C73.1455 22.308 73.4895 22.16 73.7695 21.864C74.0575 21.568 74.2015 21.164 74.2015 20.652Z"
                                  fill="#797398"/>
                        </svg>

                        <svg onClick={e => {
                            setTab(1)
                        }} className={tab === 1 ? 'active' : ''} width="101" height="39" viewBox="0 0 101 39"
                             fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path className={'p1'}
                                  d="M0.5 8.45682L8.44109 0.5H92.0194L100.5 8.46632V19.5V30.5337L92.0194 38.5H8.44109L0.5 30.5432V19.5V8.45682Z"
                                  fill="#FBFBF4" stroke="#C1B9C0"/>
                            <path className={'p2'} opacity="0.3"
                                  d="M4.25 10.6602L10.573 4.25H88.6429L95.75 10.6688V19.5V28.3312L88.6429 34.75H10.573L4.25 28.3398V19.5V10.6602Z"
                                  fill="#FBFBF4" stroke="#BFB9C1" strokeWidth="0.5"/>
                            <path className={'p3'}
                                  d="M21.9389 15.624V24H20.2589V20.436H16.6709V24H14.9909V15.624H16.6709V19.068H20.2589V15.624H21.9389ZM24.8045 16.56C24.5085 16.56 24.2605 16.468 24.0605 16.284C23.8685 16.092 23.7725 15.856 23.7725 15.576C23.7725 15.296 23.8685 15.064 24.0605 14.88C24.2605 14.688 24.5085 14.592 24.8045 14.592C25.1005 14.592 25.3445 14.688 25.5365 14.88C25.7365 15.064 25.8365 15.296 25.8365 15.576C25.8365 15.856 25.7365 16.092 25.5365 16.284C25.3445 16.468 25.1005 16.56 24.8045 16.56ZM25.6325 17.352V24H23.9525V17.352H25.6325ZM30.2563 17.244C30.7523 17.244 31.1883 17.344 31.5643 17.544C31.9403 17.736 32.2363 17.988 32.4523 18.3V17.352H34.1443V24.048C34.1443 24.664 34.0203 25.212 33.7723 25.692C33.5243 26.18 33.1523 26.564 32.6563 26.844C32.1603 27.132 31.5603 27.276 30.8563 27.276C29.9123 27.276 29.1363 27.056 28.5283 26.616C27.9283 26.176 27.5883 25.576 27.5083 24.816H29.1763C29.2643 25.12 29.4523 25.36 29.7403 25.536C30.0363 25.72 30.3923 25.812 30.8083 25.812C31.2963 25.812 31.6923 25.664 31.9963 25.368C32.3003 25.08 32.4523 24.64 32.4523 24.048V23.016C32.2363 23.328 31.9363 23.588 31.5523 23.796C31.1763 24.004 30.7443 24.108 30.2563 24.108C29.6963 24.108 29.1843 23.964 28.7203 23.676C28.2563 23.388 27.8883 22.984 27.6163 22.464C27.3523 21.936 27.2203 21.332 27.2203 20.652C27.2203 19.98 27.3523 19.384 27.6163 18.864C27.8883 18.344 28.2523 17.944 28.7083 17.664C29.1723 17.384 29.6883 17.244 30.2563 17.244ZM32.4523 20.676C32.4523 20.268 32.3723 19.92 32.2123 19.632C32.0523 19.336 31.8363 19.112 31.5643 18.96C31.2923 18.8 31.0003 18.72 30.6883 18.72C30.3763 18.72 30.0883 18.796 29.8243 18.948C29.5603 19.1 29.3443 19.324 29.1763 19.62C29.0163 19.908 28.9363 20.252 28.9363 20.652C28.9363 21.052 29.0163 21.404 29.1763 21.708C29.3443 22.004 29.5603 22.232 29.8243 22.392C30.0963 22.552 30.3843 22.632 30.6883 22.632C31.0003 22.632 31.2923 22.556 31.5643 22.404C31.8363 22.244 32.0523 22.02 32.2123 21.732C32.3723 21.436 32.4523 21.084 32.4523 20.676ZM39.8891 17.256C40.3931 17.256 40.8411 17.368 41.2331 17.592C41.6251 17.808 41.9291 18.132 42.1451 18.564C42.3691 18.988 42.4811 19.5 42.4811 20.1V24H40.8011V20.328C40.8011 19.8 40.6691 19.396 40.4051 19.116C40.1411 18.828 39.7811 18.684 39.3251 18.684C38.8611 18.684 38.4931 18.828 38.2211 19.116C37.9571 19.396 37.8251 19.8 37.8251 20.328V24H36.1451V15.12H37.8251V18.18C38.0411 17.892 38.3291 17.668 38.6891 17.508C39.0491 17.34 39.4491 17.256 39.8891 17.256ZM50.2021 24.108C49.6581 24.108 49.1701 24.012 48.7381 23.82C48.3061 23.62 47.9621 23.352 47.7061 23.016C47.4581 22.68 47.3221 22.308 47.2981 21.9H48.9901C49.0221 22.156 49.1461 22.368 49.3621 22.536C49.5861 22.704 49.8621 22.788 50.1901 22.788C50.5101 22.788 50.7581 22.724 50.9341 22.596C51.1181 22.468 51.2101 22.304 51.2101 22.104C51.2101 21.888 51.0981 21.728 50.8741 21.624C50.6581 21.512 50.3101 21.392 49.8301 21.264C49.3341 21.144 48.9261 21.02 48.6061 20.892C48.2941 20.764 48.0221 20.568 47.7901 20.304C47.5661 20.04 47.4541 19.684 47.4541 19.236C47.4541 18.868 47.5581 18.532 47.7661 18.228C47.9821 17.924 48.2861 17.684 48.6781 17.508C49.0781 17.332 49.5461 17.244 50.0821 17.244C50.8741 17.244 51.5061 17.444 51.9781 17.844C52.4501 18.236 52.7101 18.768 52.7581 19.44H51.1501C51.1261 19.176 51.0141 18.968 50.8141 18.816C50.6221 18.656 50.3621 18.576 50.0341 18.576C49.7301 18.576 49.4941 18.632 49.3261 18.744C49.1661 18.856 49.0861 19.012 49.0861 19.212C49.0861 19.436 49.1981 19.608 49.4221 19.728C49.6461 19.84 49.9941 19.956 50.4661 20.076C50.9461 20.196 51.3421 20.32 51.6541 20.448C51.9661 20.576 52.2341 20.776 52.4581 21.048C52.6901 21.312 52.8101 21.664 52.8181 22.104C52.8181 22.488 52.7101 22.832 52.4941 23.136C52.2861 23.44 51.9821 23.68 51.5821 23.856C51.1901 24.024 50.7301 24.108 50.2021 24.108ZM54.1251 20.676C54.1251 19.988 54.2651 19.388 54.5451 18.876C54.8251 18.356 55.2131 17.956 55.7091 17.676C56.2051 17.388 56.7731 17.244 57.4131 17.244C58.2371 17.244 58.9171 17.452 59.4531 17.868C59.9971 18.276 60.3611 18.852 60.5451 19.596H58.7331C58.6371 19.308 58.4731 19.084 58.2411 18.924C58.0171 18.756 57.7371 18.672 57.4011 18.672C56.9211 18.672 56.5411 18.848 56.2611 19.2C55.9811 19.544 55.8411 20.036 55.8411 20.676C55.8411 21.308 55.9811 21.8 56.2611 22.152C56.5411 22.496 56.9211 22.668 57.4011 22.668C58.0811 22.668 58.5251 22.364 58.7331 21.756H60.5451C60.3611 22.476 59.9971 23.048 59.4531 23.472C58.9091 23.896 58.2291 24.108 57.4131 24.108C56.7731 24.108 56.2051 23.968 55.7091 23.688C55.2131 23.4 54.8251 23 54.5451 22.488C54.2651 21.968 54.1251 21.364 54.1251 20.676ZM65.0879 24.108C64.4479 24.108 63.8719 23.968 63.3599 23.688C62.8479 23.4 62.4439 22.996 62.1479 22.476C61.8599 21.956 61.7159 21.356 61.7159 20.676C61.7159 19.996 61.8639 19.396 62.1599 18.876C62.4639 18.356 62.8759 17.956 63.3959 17.676C63.9159 17.388 64.4959 17.244 65.1359 17.244C65.7759 17.244 66.3559 17.388 66.8759 17.676C67.3959 17.956 67.8039 18.356 68.0999 18.876C68.4039 19.396 68.5559 19.996 68.5559 20.676C68.5559 21.356 68.3999 21.956 68.0879 22.476C67.7839 22.996 67.3679 23.4 66.8399 23.688C66.3199 23.968 65.7359 24.108 65.0879 24.108ZM65.0879 22.644C65.3919 22.644 65.6759 22.572 65.9399 22.428C66.2119 22.276 66.4279 22.052 66.5879 21.756C66.7479 21.46 66.8279 21.1 66.8279 20.676C66.8279 20.044 66.6599 19.56 66.3239 19.224C65.9959 18.88 65.5919 18.708 65.1119 18.708C64.6319 18.708 64.2279 18.88 63.8999 19.224C63.5799 19.56 63.4199 20.044 63.4199 20.676C63.4199 21.308 63.5759 21.796 63.8879 22.14C64.2079 22.476 64.6079 22.644 65.0879 22.644ZM71.8282 18.384C72.0442 18.032 72.3242 17.756 72.6682 17.556C73.0202 17.356 73.4202 17.256 73.8682 17.256V19.02H73.4242C72.8962 19.02 72.4962 19.144 72.2242 19.392C71.9602 19.64 71.8282 20.072 71.8282 20.688V24H70.1482V17.352H71.8282V18.384ZM81.5398 20.532C81.5398 20.772 81.5238 20.988 81.4918 21.18H76.6318C76.6718 21.66 76.8398 22.036 77.1358 22.308C77.4318 22.58 77.7958 22.716 78.2278 22.716C78.8518 22.716 79.2958 22.448 79.5598 21.912H81.3718C81.1798 22.552 80.8118 23.08 80.2678 23.496C79.7238 23.904 79.0558 24.108 78.2638 24.108C77.6238 24.108 77.0478 23.968 76.5358 23.688C76.0318 23.4 75.6358 22.996 75.3478 22.476C75.0678 21.956 74.9278 21.356 74.9278 20.676C74.9278 19.988 75.0678 19.384 75.3478 18.864C75.6278 18.344 76.0198 17.944 76.5238 17.664C77.0278 17.384 77.6078 17.244 78.2638 17.244C78.8958 17.244 79.4598 17.38 79.9558 17.652C80.4598 17.924 80.8478 18.312 81.1198 18.816C81.3998 19.312 81.5398 19.884 81.5398 20.532ZM79.7998 20.052C79.7918 19.62 79.6358 19.276 79.3318 19.02C79.0278 18.756 78.6558 18.624 78.2158 18.624C77.7998 18.624 77.4478 18.752 77.1598 19.008C76.8798 19.256 76.7078 19.604 76.6438 20.052H79.7998ZM85.6701 24.108C85.1261 24.108 84.6381 24.012 84.2061 23.82C83.774 23.62 83.43 23.352 83.1741 23.016C82.926 22.68 82.79 22.308 82.766 21.9H84.4581C84.4901 22.156 84.6141 22.368 84.8301 22.536C85.0541 22.704 85.33 22.788 85.658 22.788C85.9781 22.788 86.2261 22.724 86.4021 22.596C86.5861 22.468 86.6781 22.304 86.6781 22.104C86.6781 21.888 86.5661 21.728 86.3421 21.624C86.126 21.512 85.778 21.392 85.298 21.264C84.802 21.144 84.3941 21.02 84.074 20.892C83.762 20.764 83.49 20.568 83.258 20.304C83.034 20.04 82.922 19.684 82.922 19.236C82.922 18.868 83.026 18.532 83.234 18.228C83.45 17.924 83.7541 17.684 84.1461 17.508C84.5461 17.332 85.0141 17.244 85.5501 17.244C86.3421 17.244 86.9741 17.444 87.4461 17.844C87.9181 18.236 88.1781 18.768 88.2261 19.44H86.6181C86.5941 19.176 86.4821 18.968 86.2821 18.816C86.0901 18.656 85.8301 18.576 85.5021 18.576C85.1981 18.576 84.9621 18.632 84.794 18.744C84.6341 18.856 84.5541 19.012 84.5541 19.212C84.5541 19.436 84.6661 19.608 84.89 19.728C85.1141 19.84 85.4621 19.956 85.934 20.076C86.414 20.196 86.8101 20.32 87.1221 20.448C87.4341 20.576 87.7021 20.776 87.9261 21.048C88.1581 21.312 88.2781 21.664 88.2861 22.104C88.2861 22.488 88.1781 22.832 87.9621 23.136C87.7541 23.44 87.4501 23.68 87.0501 23.856C86.6581 24.024 86.1981 24.108 85.6701 24.108Z"
                                  fill="#797398"/>
                        </svg>

                        <svg onClick={e => {
                            setTab(2)
                        }} className={tab === 2 ? 'active' : ''} width="101" height="39" viewBox="0 0 101 39"
                             fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path className={'p1'}
                                  d="M0.5 8.45682L8.44109 0.5H92.0194L100.5 8.46632V19.5V30.5337L92.0194 38.5H8.44109L0.5 30.5432V19.5V8.45682Z"
                                  fill="#FBFBF4" stroke="#C1B9C0"/>
                            <path className={'p2'} opacity="0.3"
                                  d="M4.25 10.6602L10.573 4.25H88.6429L95.75 10.6688V19.5V28.3312L88.6429 34.75H10.573L4.25 28.3398V19.5V10.6602Z"
                                  fill="#FBFBF4" stroke="#BFB9C1" strokeWidth="0.5"/>
                            <path className={'p3'}
                                  d="M26.718 18.144C26.526 17.792 26.262 17.524 25.926 17.34C25.59 17.156 25.198 17.064 24.75 17.064C24.254 17.064 23.814 17.176 23.43 17.4C23.046 17.624 22.746 17.944 22.53 18.36C22.314 18.776 22.206 19.256 22.206 19.8C22.206 20.36 22.314 20.848 22.53 21.264C22.754 21.68 23.062 22 23.454 22.224C23.846 22.448 24.302 22.56 24.822 22.56C25.462 22.56 25.986 22.392 26.394 22.056C26.802 21.712 27.07 21.236 27.198 20.628H24.318V19.344H28.854V20.808C28.742 21.392 28.502 21.932 28.134 22.428C27.766 22.924 27.29 23.324 26.706 23.628C26.13 23.924 25.482 24.072 24.762 24.072C23.954 24.072 23.222 23.892 22.566 23.532C21.918 23.164 21.406 22.656 21.03 22.008C20.662 21.36 20.478 20.624 20.478 19.8C20.478 18.976 20.662 18.24 21.03 17.592C21.406 16.936 21.918 16.428 22.566 16.068C23.222 15.7 23.95 15.516 24.75 15.516C25.694 15.516 26.514 15.748 27.21 16.212C27.906 16.668 28.386 17.312 28.65 18.144H26.718ZM36.637 20.532C36.637 20.772 36.621 20.988 36.589 21.18H31.729C31.769 21.66 31.937 22.036 32.233 22.308C32.529 22.58 32.893 22.716 33.325 22.716C33.949 22.716 34.393 22.448 34.657 21.912H36.469C36.277 22.552 35.909 23.08 35.365 23.496C34.821 23.904 34.153 24.108 33.361 24.108C32.721 24.108 32.145 23.968 31.633 23.688C31.129 23.4 30.733 22.996 30.445 22.476C30.165 21.956 30.025 21.356 30.025 20.676C30.025 19.988 30.165 19.384 30.445 18.864C30.725 18.344 31.117 17.944 31.621 17.664C32.125 17.384 32.705 17.244 33.361 17.244C33.993 17.244 34.557 17.38 35.053 17.652C35.557 17.924 35.945 18.312 36.217 18.816C36.497 19.312 36.637 19.884 36.637 20.532ZM34.897 20.052C34.889 19.62 34.733 19.276 34.429 19.02C34.125 18.756 33.753 18.624 33.313 18.624C32.897 18.624 32.545 18.752 32.257 19.008C31.977 19.256 31.805 19.604 31.741 20.052H34.897ZM40.1792 18.732V21.948C40.1792 22.172 40.2312 22.336 40.3352 22.44C40.4472 22.536 40.6312 22.584 40.8872 22.584H41.6672V24H40.6112C39.1952 24 38.4872 23.312 38.4872 21.936V18.732H37.6952V17.352H38.4872V15.708H40.1792V17.352H41.6672V18.732H40.1792ZM46.023 20.676C46.023 19.988 46.163 19.388 46.443 18.876C46.723 18.356 47.111 17.956 47.607 17.676C48.103 17.388 48.671 17.244 49.311 17.244C50.135 17.244 50.815 17.452 51.351 17.868C51.895 18.276 52.259 18.852 52.443 19.596H50.631C50.535 19.308 50.371 19.084 50.139 18.924C49.915 18.756 49.635 18.672 49.299 18.672C48.819 18.672 48.439 18.848 48.159 19.2C47.879 19.544 47.739 20.036 47.739 20.676C47.739 21.308 47.879 21.8 48.159 22.152C48.439 22.496 48.819 22.668 49.299 22.668C49.979 22.668 50.423 22.364 50.631 21.756H52.443C52.259 22.476 51.895 23.048 51.351 23.472C50.807 23.896 50.127 24.108 49.311 24.108C48.671 24.108 48.103 23.968 47.607 23.688C47.111 23.4 46.723 23 46.443 22.488C46.163 21.968 46.023 21.364 46.023 20.676ZM53.6017 20.652C53.6017 19.98 53.7337 19.384 53.9977 18.864C54.2697 18.344 54.6337 17.944 55.0897 17.664C55.5537 17.384 56.0697 17.244 56.6377 17.244C57.1337 17.244 57.5657 17.344 57.9337 17.544C58.3097 17.744 58.6097 17.996 58.8337 18.3V17.352H60.5257V24H58.8337V23.028C58.6177 23.34 58.3177 23.6 57.9337 23.808C57.5577 24.008 57.1217 24.108 56.6257 24.108C56.0657 24.108 55.5537 23.964 55.0897 23.676C54.6337 23.388 54.2697 22.984 53.9977 22.464C53.7337 21.936 53.6017 21.332 53.6017 20.652ZM58.8337 20.676C58.8337 20.268 58.7537 19.92 58.5937 19.632C58.4337 19.336 58.2177 19.112 57.9457 18.96C57.6737 18.8 57.3817 18.72 57.0697 18.72C56.7577 18.72 56.4697 18.796 56.2057 18.948C55.9417 19.1 55.7257 19.324 55.5577 19.62C55.3977 19.908 55.3177 20.252 55.3177 20.652C55.3177 21.052 55.3977 21.404 55.5577 21.708C55.7257 22.004 55.9417 22.232 56.2057 22.392C56.4777 22.552 56.7657 22.632 57.0697 22.632C57.3817 22.632 57.6737 22.556 57.9457 22.404C58.2177 22.244 58.4337 22.02 58.5937 21.732C58.7537 21.436 58.8337 21.084 58.8337 20.676ZM64.2065 18.384C64.4225 18.032 64.7025 17.756 65.0465 17.556C65.3985 17.356 65.7985 17.256 66.2465 17.256V19.02H65.8025C65.2745 19.02 64.8745 19.144 64.6025 19.392C64.3385 19.64 64.2065 20.072 64.2065 20.688V24H62.5265V17.352H64.2065V18.384ZM67.3061 20.652C67.3061 19.98 67.4381 19.384 67.7021 18.864C67.9741 18.344 68.3421 17.944 68.8061 17.664C69.2701 17.384 69.7861 17.244 70.3541 17.244C70.7861 17.244 71.1981 17.34 71.5901 17.532C71.9821 17.716 72.2941 17.964 72.5261 18.276V15.12H74.2301V24H72.5261V23.016C72.3181 23.344 72.0261 23.608 71.6501 23.808C71.2741 24.008 70.8381 24.108 70.3421 24.108C69.7821 24.108 69.2701 23.964 68.8061 23.676C68.3421 23.388 67.9741 22.984 67.7021 22.464C67.4381 21.936 67.3061 21.332 67.3061 20.652ZM72.5381 20.676C72.5381 20.268 72.4581 19.92 72.2981 19.632C72.1381 19.336 71.9221 19.112 71.6501 18.96C71.3781 18.8 71.0861 18.72 70.7741 18.72C70.4621 18.72 70.1741 18.796 69.9101 18.948C69.6461 19.1 69.4301 19.324 69.2621 19.62C69.1021 19.908 69.0221 20.252 69.0221 20.652C69.0221 21.052 69.1021 21.404 69.2621 21.708C69.4301 22.004 69.6461 22.232 69.9101 22.392C70.1821 22.552 70.4701 22.632 70.7741 22.632C71.0861 22.632 71.3781 22.556 71.6501 22.404C71.9221 22.244 72.1381 22.02 72.2981 21.732C72.4581 21.436 72.5381 21.084 72.5381 20.676ZM78.7749 24.108C78.2309 24.108 77.7429 24.012 77.3109 23.82C76.8789 23.62 76.5349 23.352 76.2789 23.016C76.0309 22.68 75.8949 22.308 75.8709 21.9H77.5629C77.5949 22.156 77.7189 22.368 77.9349 22.536C78.1589 22.704 78.4349 22.788 78.7629 22.788C79.0829 22.788 79.3309 22.724 79.5069 22.596C79.6909 22.468 79.7829 22.304 79.7829 22.104C79.7829 21.888 79.6709 21.728 79.4469 21.624C79.2309 21.512 78.8829 21.392 78.4029 21.264C77.9069 21.144 77.4989 21.02 77.1789 20.892C76.8669 20.764 76.5949 20.568 76.3629 20.304C76.1389 20.04 76.0269 19.684 76.0269 19.236C76.0269 18.868 76.1309 18.532 76.3389 18.228C76.5549 17.924 76.8589 17.684 77.2509 17.508C77.6509 17.332 78.1189 17.244 78.6549 17.244C79.4469 17.244 80.0789 17.444 80.5509 17.844C81.0229 18.236 81.2829 18.768 81.3309 19.44H79.7229C79.6989 19.176 79.5869 18.968 79.3869 18.816C79.1949 18.656 78.9349 18.576 78.6069 18.576C78.3029 18.576 78.0669 18.632 77.8989 18.744C77.7389 18.856 77.6589 19.012 77.6589 19.212C77.6589 19.436 77.7709 19.608 77.9949 19.728C78.2189 19.84 78.5669 19.956 79.0389 20.076C79.5189 20.196 79.9149 20.32 80.2269 20.448C80.5389 20.576 80.8069 20.776 81.0309 21.048C81.2629 21.312 81.3829 21.664 81.3909 22.104C81.3909 22.488 81.2829 22.832 81.0669 23.136C80.8589 23.44 80.5549 23.68 80.1549 23.856C79.7629 24.024 79.3029 24.108 78.7749 24.108Z"
                                  fill="#797398"/>
                        </svg>
                    </div>

                    <div className={`tab-content ${tab === 0 ? 'active' : ''}`}>
                        <div className={'title'}>Combine</div>
                        <div className={'beast-swiper'} style={{height: '520px'}}>
                            {
                                !loading && <AppSwiper
                                    centeredSlides={true}
                                    initIndex={swiperInitIndex}
                                    items={items}
                                    clickToSlide={false}
                                    space={8}
                                    itemWidth={326}
                                />
                            }
                        </div>

                        { !!user.userName &&
                            <>
                                <div className={'title'}>My card</div>
                                <div className={'my-card'}>
                                    {
                                        myMergedCards.map((card, index) => {
                                            return <div className={'card'} key={index} onClick={e => {showBadgelet(card)}}>
                                                <img src={card.badge.image_url} alt=""/>
                                            </div>
                                        })
                                    }
                                    {
                                        myCards.map((card, index) => {
                                            return <div className={'card'} key={index} onClick={e => {showBadgelet(card)}}>
                                                <img src={card.badge.image_url} alt=""/>
                                            </div>
                                        })
                                    }
                                </div>
                            </>
                        }
                    </div>

                    <div className={`tab-content ${tab === 1 ? 'active' : ''}`}>
                        <div className={'title2'}>Your scores</div>
                        <div className={'table'}>
                            <div className={'table-head'}>
                                <div className={'column'}>Rank</div>
                                <div className={'column'}>Name</div>
                                <div className={'column'}>Cards</div>
                            </div>
                            {rank.filter(r => r.user.id === user.id).map((r, index) => {
                                const rankIndex = rank.findIndex(r => r.user.id === user.id)
                                if (rankIndex === -1) {
                                    return <div key={index} className={'table-row'}>
                                        <div className={'column'}>--</div>
                                        <div className={'column'}>{r.user.nickname || r.user.username || ''}</div>
                                        <div className={'column'}>--</div>
                                    </div>
                                } else {
                                    return <div key={index} className={'table-row'}>
                                        <div className={'column'}>{rankIndex + 1}</div>
                                        <div className={'column'}>{r.user.nickname || r.user.username || ''}</div>
                                        <div className={'column'}>{r.count}</div>
                                    </div>
                                }
                            })
                            }
                            <div className={'title2'}>Leaderboard</div>
                            {
                                rank.map((r, index) => {
                                    return <div className={'table-row'} key={index}>
                                        <div className={'column'}>{index + 1}</div>
                                        <div className={'column'}>{r.user.nickname || r.user.username || ''}</div>
                                        <div className={'column'}>{r.count}</div>
                                    </div>
                                })
                            }
                        </div>
                    </div>

                    <div className={`tab-content ${tab === 2 ? 'active' : ''}`}>
                        <div className={'title'}>How to get the cards？</div>
                        <Panel title={'In person'}>
                            <div className={'text-1'}>
                                Offline event venues randomly place QR code check-in points. Scan the QR code to get a
                                card.
                                Each person has only one chance per location each time.
                            </div>
                        </Panel>
                        <Panel title={'More event'}>
                            <div className={'text-1'}>
                                Participate in the event to receive cards. At the end of the event, participants will be
                                awarded an event POAP and will have a chance to draw a card.
                            </div>
                            <div className={'event-list'}>
                                {
                                    events.map((event, index) => {
                                        return <div className={'list-item'} key={index} onClick={e => {
                                            router.push(`/event/detail/${event.id}`)
                                        }}>
                                            <img src={'/images/merge/poap.png'} alt=""/>
                                            <div>
                                                <div className={'name'}>{event.title}</div>
                                                <div
                                                    className={'detail'}>{formatTime(event.start_time!)} - {formatTime(event.end_time!)}</div>
                                                <div className={'detail'}>{event.formatted_address}</div>
                                            </div>
                                        </div>
                                    })
                                }
                                <Link className={'show-more'} href={'/'}>view more <ChevronDown size={16}/></Link>
                            </div>
                        </Panel>
                    </div>
                </div>
            </div>
        </div>
    </div>)
}

export default Merge
